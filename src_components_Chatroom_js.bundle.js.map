{"version":3,"file":"src_components_Chatroom_js.bundle.js","mappings":"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","sources":["webpack://vy/./src/components/Chatroom.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { cable_api } from '../api';\nimport log from 'loglevel';\nimport { createConsumer } from '@rails/actioncable';\nimport { getToken } from '../api';\nimport { useUserAuth } from '../context/UserAuthContext';\n\nconst Chatroom = () => {\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState('');\n  const [onlineUsers, setOnlineUsers] = useState([]);\n  const { loading } = useUserAuth();\n  const chatroomChannelRef = useRef(null);\n\n  useEffect(() => {\n    if (loading) return; // Wait until loading is complete\n    const jwt = getToken(); // Get the JWT token from local storage or another storage mechanism\n    const consumer = createConsumer(`ws://localhost:3333/cable?jwt=${jwt}`);\n\n    chatroomChannelRef.current = consumer.subscriptions.create(\n      'ChatroomChannel',\n      {\n        connected() {\n          log.info('Connected to the chatroom!');\n        },\n        disconnected() {\n          log.info('Disconnected from the chatroom!');\n        },\n        received(data) {\n          log.info(data);\n          if (data.type === 'online_users') {\n            setOnlineUsers(data.users);\n          }\n          if (data.type === 'message') {\n            setMessages((prevMessages) => [...prevMessages, data.message]);\n          }\n        },\n        speak(message) {\n          this.perform('speak', { message });\n        },\n      }\n    );\n\n    cable_api.get('/messages').then((response) => {\n      setMessages(response.data);\n    });\n\n    return () => {\n      consumer.disconnect();\n    };\n  }, [loading]);\n\n  useEffect(() => {\n    log.info({ messages });\n  }, [messages]);\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    chatroomChannelRef.current.speak(message);\n    setMessage('');\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <>\n      <div className=\"chatroom\">\n        <h1>Chatroom</h1>\n        <div id=\"messages\">\n          {messages?.map((msg, index) => (\n            <div key={index}>\n              <strong>{msg?.user_id}:</strong> {msg?.content}\n            </div>\n          ))}\n        </div>\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={message}\n            onChange={(e) => setMessage(e.target.value)}\n            placeholder=\"Type your message here...\"\n          />\n          <button type=\"submit\">Send</button>\n        </form>\n      </div>\n      <div className=\"online-users\">\n        <h1>Online Users</h1>\n        <ul>\n          {onlineUsers.map((user) => (\n            <li key={user.id}>{user.email}</li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n};\n\nexport default Chatroom;\n"],"names":["React","useState","useEffect","useRef","cable_api","log","createConsumer","getToken","useUserAuth","Chatroom","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","message","setMessage","_useState5","_useState6","onlineUsers","setOnlineUsers","_useUserAuth","loading","chatroomChannelRef","jwt","consumer","concat","current","subscriptions","create","connected","info","disconnected","received","data","type","users","prevMessages","_toConsumableArray","speak","perform","get","then","response","disconnect","handleSubmit","event","preventDefault","createElement","Fragment","className","id","map","msg","index","key","user_id","content","onSubmit","value","onChange","e","target","placeholder","user","email"],"sourceRoot":""}