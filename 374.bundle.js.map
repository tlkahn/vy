{"version":3,"file":"374.bundle.js","mappings":"kTAQA,IAAMA,EAAe,SAAHC,GAAwB,I,IAAlBC,EAAWD,EAAXC,YAC8BC,G,GAAZC,EAAAA,EAAAA,UAAS,I,EAAG,E,k5BAA7CC,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAC9BI,GAAWC,EAAAA,EAAAA,UACXC,GAAeD,EAAAA,EAAAA,UACrBE,GAAyCC,EAAAA,EAAAA,KAAjCC,EAAkBF,EAAlBE,mBAAoBC,EAAQH,EAARG,SAwB5B,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAqB,SAACC,GACtBT,EAASU,UAAYR,EAAaQ,QAAQC,SAASF,EAAMG,SAC3DjB,GAAY,EAEhB,EAEA,OADAkB,SAASC,iBAAiB,YAAaN,GAChC,WACLK,SAASE,oBAAoB,YAAaP,EAC5C,CACF,GAAG,CAACb,KAEJY,EAAAA,EAAAA,YAAU,WACRS,IAAAA,KAAS,CAAEV,SAAAA,GACb,GAAG,CAACA,IAGFW,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACEC,IAAKlB,EACLmB,UAAU,yEAEVF,EAAAA,cAAA,OACEC,IAAKhB,EACLiB,UAAU,sDAEVF,EAAAA,cAAA,OAAKE,UAAU,wEACZb,GACCA,EAASc,KAAI,SAACC,EAAGC,GAAK,OACpBL,EAAAA,cAAA,OAAKM,IAAKD,EAAOH,UAAU,6BACxBE,EAAEG,QACC,KAGZP,EAAAA,cAAA,QACEQ,SAzCmB,SAACC,GAC5BA,EAAEC,iBACFtB,EAAmBK,QAAQkB,MAAM9B,GACjCC,EAAgB,GAClB,EAsCUoB,UAAU,iCAEVF,EAAAA,cAAA,SACEY,KAAK,OACLC,MAAOhC,EACPiC,SAAU,SAACL,GAAC,OAAK3B,EAAgB2B,EAAEd,OAAOkB,MAAM,EAChDE,YAAY,oBACZb,UAAU,6BAEZF,EAAAA,cAAA,UAAQY,KAAK,SAASV,UAAU,YAC9BF,EAAAA,cAACgB,EAAAA,EAAe,CAACC,KAAMC,EAAAA,SAI7BlB,EAAAA,cAAA,UAAQmB,QAASzC,EAAawB,UAAU,8BACtCF,EAAAA,cAACgB,EAAAA,EAAe,CAACC,KAAMG,EAAAA,QAKjC,EAEA5C,EAAa6C,UAAY,CACvB3C,YAAa4C,IAAAA,KAAeC,YAG9B,S","sources":["webpack://vy/./src/components/QuestionForm.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport { useChat } from '../context/ChatContext'; // Adjust the path as needed\nimport PropTypes from 'prop-types';\nimport log from 'loglevel';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPaperPlane } from '@fortawesome/free-regular-svg-icons';\nimport { faTimeline, faTimes } from '@fortawesome/free-solid-svg-icons';\n\nconst QuestionForm = ({ toggleModal }) => {\n  const [userQuestion, setUserQuestion] = useState('');\n  const modalRef = useRef(); // Ref for the modal container\n  const containerRef = useRef(); // Ref for the modal container\n  const { chatroomChannelRef, messages } = useChat();\n\n  const handleQuestionSubmit = (e) => {\n    e.preventDefault();\n    chatroomChannelRef.current.speak(userQuestion);\n    setUserQuestion('');\n  };\n\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (modalRef.current && !containerRef.current.contains(event.target)) {\n        toggleModal(false); // Assuming toggleModal can accept a boolean to show/hide\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [toggleModal]); // Add toggleModal to the dependencies array if it changes\n\n  useEffect(() => {\n    log.info({ messages });\n  }, [messages]);\n\n  return (\n    <>\n      <div\n        ref={modalRef}\n        className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\"\n      >\n        <div\n          ref={containerRef}\n          className=\"bg-gray-700 p-5 rounded-lg question-form-container\"\n        >\n          <div className=\"question-history bg-gray-600 p-4 mb-4 rounded overflow-auto max-h-40\">\n            {messages &&\n              messages.map((m, index) => (\n                <div key={index} className=\"text-white mb-2 last:mb-0\">\n                  {m.content}\n                </div>\n              ))}\n          </div>\n          <form\n            onSubmit={handleQuestionSubmit}\n            className=\"question-form-input my-4 flex\"\n          >\n            <input\n              type=\"text\"\n              value={userQuestion}\n              onChange={(e) => setUserQuestion(e.target.value)}\n              placeholder=\"Ask a question...\"\n              className=\"text-black flex-grow p-2\"\n            />\n            <button type=\"submit\" className=\"ml-2 p-2\">\n              <FontAwesomeIcon icon={faPaperPlane} />\n            </button>\n          </form>\n        </div>\n        <button onClick={toggleModal} className=\"absolute top-0 right-0 p-4\">\n          <FontAwesomeIcon icon={faTimes} />\n        </button>\n      </div>\n    </>\n  );\n};\n\nQuestionForm.propTypes = {\n  toggleModal: PropTypes.func.isRequired, // Validate src prop\n};\n\nexport default QuestionForm;\n"],"names":["QuestionForm","_ref","toggleModal","_useState2","useState","userQuestion","setUserQuestion","modalRef","useRef","containerRef","_useChat","useChat","chatroomChannelRef","messages","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","log","React","ref","className","map","m","index","key","content","onSubmit","e","preventDefault","speak","type","value","onChange","placeholder","FontAwesomeIcon","icon","faPaperPlane","onClick","faTimes","propTypes","PropTypes","isRequired"],"sourceRoot":""}